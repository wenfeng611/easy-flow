<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wf.flow.mapper.FlowItemMapper">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.wf.flow.entity.FlowItemEntity" id="flowItemMap">
        <id property="id" jdbcType="INTEGER" column="id"/>
        <result property="flowId" column="flow_id"/>
        <result property="currentNodeId" column="current_node_id"/>
        <result property="flowStatus" column="flow_status"/>
        <result property="createTime" column="add_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="createrName" column="creator"/>
		<result property="sceneCode" column="scene_code"/>
		<result property="flowName" column="flow_name"/>
		<result property="businessCustomId" column="business_custom_id"/>
		<result property="paramsJson" column="params_json"/>
		<result property="parentNodeIds" column="parent_node_ids"/>
		<result property="parentFlowIds" column="parent_flow_ids"/>
		<result property="nodeType" column="node_type"/>

    </resultMap>

    <sql id="base_colum">
			id,
			`flow_id`,
			`current_node_id`,
			`flow_status`,
			`add_time`,
			`update_time`,
			`creator`,
			business_custom_id,
			params_json,
			parent_node_ids,
			parent_flow_ids,
			scene_code,
			node_type
	</sql>

    <insert id="save" parameterType="com.wf.flow.entity.FlowItemEntity" useGeneratedKeys="true" keyProperty="id">
        insert into t_flow_item
		(
		    `flow_id`,
			`current_node_id`,
			`flow_status`,
			`add_time`,
			`update_time`,
			`creator`,
			scene_code,
			business_custom_id
		)
		values
		(
			#{flowId},
			#{currentNodeId},
			#{flowStatus},
			#{createTime},
			#{updateTime},
			#{createrName},
			#{sceneCode},
			#{businessCustomId}
		)
    </insert>

	<insert id="saveBatch" parameterType="com.wf.flow.entity.FlowItemEntity" useGeneratedKeys="true" keyProperty="id">
        insert into t_flow_item
		(
		    `flow_id`,
			`current_node_id`,
			`flow_status`,
			`add_time`,
			`update_time`,
			`creator`,
			scene_code,
			business_custom_id
		)
		values
		<foreach collection="list" index="index" item="item"
				 separator=",">
			(
			#{item.flowId},
			#{item.currentNodeId},
			#{item.flowStatus},
			#{item.createTime},
			#{item.updateTime},
			#{item.createrName},
			#{item.sceneCode},
			#{businessCustomId}
			)
		</foreach>
		;
    </insert>

    <update id="updateFlowItemStatusAndNodeId">
        update t_flow_item
		set update_time=now()
		<if test="nodeId!= null">
            ,current_node_id=#{nodeId}
        </if>
		<if test="flowStatus!= null and flowStatus!= 0">
			,flow_status=#{flowStatus}
		</if>
		where id=#{id}
    </update>

	<update id="updateFlowId">
		update t_flow_item
		set update_time=now(),flow_id=#{flowId}
		where id=#{id}
	</update>
	<update id="updateFlowItemStatusAndNodeIdWithParams">
		update t_flow_item
		set update_time=now()
		<if test="nodeId!= null">
			,current_node_id=#{nodeId}
		</if>
		<if test="nodeType!= null and nodeType!=''">
			,node_type=#{nodeType}
		</if>
		<if test="flowStatus!= null and flowStatus!= 0">
			,flow_status=#{flowStatus}
		</if>
		<if test="paramsJson!= null and paramsJson!= ''">
			,params_json=#{paramsJson}
		</if>
		where id=#{id}
	</update>
	<update id="updateParentNodeFlowIds">
		update t_flow_item
		set update_time=now(),parent_node_ids=#{parentNodeIds},parent_flow_ids=#{parentFlowIds},flow_id=#{currentFlowId},scene_code=#{sceneCode}
		where id=#{id}
	</update>
	<update id="update">
		update t_flow_item
		set update_time=now()
		<if test="flowId!= null and flowId!= 0">
			,flow_id=#{flowId}
		</if>
		<if test="currentNodeId!= null">
			,current_node_id=#{currentNodeId}
		</if>
		<if test="parentNodeIds!= null">
			,parent_node_ids=#{parentNodeIds}
		</if>
		<if test="parentFlowIds!= null">
			,parent_flow_ids=#{parentFlowIds}
		</if>
		<if test="sceneCode!= null">
			,scene_code=#{sceneCode}
		</if>
		where id=#{id}
	</update>

	<select id="findById" resultMap="flowItemMap">
        select <include refid="base_colum"></include> from t_flow_item where id=#{id} limit 1
    </select>

	<select id="countRunningFlowItems" resultType="java.lang.Integer">
		select count(*) from t_flow_item where flow_id=#{flowId} and flow_status &lt; 4
	</select>

	<select id="selectFlowItems" resultMap="flowItemMap">
		select i.id,
			i.`flow_id`,
			i.`current_node_id`,
			i.`flow_status`,
			i.`add_time`,
			i.`update_time`,
			i.`creator`,
			f.flow_name,
			i.scene_code,
			i.business_custom_id
		from t_flow_item i
		left join t_flow_config f on f.id=i.flow_id
		where 1=1
		<if test="sceneCode!=null and sceneCode!=''">
			and f.scene_code = #{sceneCode}
		</if>
		<if test="flowId!=null and flowId!=0">
			and i.flow_id=#{flowId}
		</if>
		<if test="businessId!=null and businessId!=0">
			and i.id=#{businessId}
		</if>
		<if test="flowStatus!=null and flowStatus!=0">
			and i.flow_status=#{flowStatus}
		</if>
		order by i.id desc
	</select>
    <select id="selectByIds" resultMap="flowItemMap">
		select * from t_flow_item where id in
		<foreach collection="dataList" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	<select id="findByCustomId" resultMap="flowItemMap">
		select <include refid="base_colum"></include> from t_flow_item where business_custom_id=#{customId} order by id desc limit 1
	</select>
    <select id="countFlowItems" resultType="java.lang.Long">
		select count(*)
		from t_flow_item i
		left join t_flow_config f on f.id=i.flow_id
		where 1=1
		<if test="sceneCode!=null and sceneCode!=''">
			and f.scene_code = #{sceneCode}
		</if>
		<if test="flowId!=null and flowId!=0">
			and i.flow_id=#{flowId}
		</if>
		<if test="businessId!=null and businessId!=0">
			and i.id=#{businessId}
		</if>
		<if test="flowStatus!=null and flowStatus!=0">
			and i.flow_status=#{flowStatus}
		</if>
	</select>

</mapper>
